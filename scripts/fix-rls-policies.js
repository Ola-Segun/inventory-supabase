#!/usr/bin/env node

/**
 * RLS Policy Fix Script
 * This script properly handles existing policies and applies clean RLS policies
 */

console.log('ðŸ”§ RLS POLICY FIX');
console.log('==================\n');

console.log('ðŸ“‹ Since some policies already exist, use this comprehensive fix:\n');

console.log('```sql');
console.log('-- =====================================================');
console.log('-- COMPREHENSIVE RLS POLICY CLEANUP & RECREATE');
console.log('-- =====================================================');
console.log('');
console.log('-- Step 1: Drop ALL existing policies (comprehensive)');
console.log('DROP POLICY IF EXISTS "organizations_select" ON organizations;');
console.log('DROP POLICY IF EXISTS "organizations_all" ON organizations;');
console.log('DROP POLICY IF EXISTS "stores_select" ON stores;');
console.log('DROP POLICY IF EXISTS "stores_all" ON stores;');
console.log('DROP POLICY IF EXISTS "users_select_own" ON users;');
console.log('DROP POLICY IF EXISTS "users_select_org" ON users;');
console.log('DROP POLICY IF EXISTS "users_update_own" ON users;');
console.log('DROP POLICY IF EXISTS "users_admin_manage" ON users;');
console.log('DROP POLICY IF EXISTS "store_invitations_select" ON store_invitations;');
console.log('DROP POLICY IF EXISTS "store_invitations_all" ON store_invitations;');
console.log('DROP POLICY IF EXISTS "categories_select" ON categories;');
console.log('DROP POLICY IF EXISTS "categories_all" ON categories;');
console.log('DROP POLICY IF EXISTS "products_select" ON products;');
console.log('DROP POLICY IF EXISTS "products_all" ON products;');
console.log('DROP POLICY IF EXISTS "orders_select" ON orders;');
console.log('DROP POLICY IF EXISTS "orders_all" ON orders;');
console.log('DROP POLICY IF EXISTS "audit_logs_select" ON audit_logs;');
console.log('DROP POLICY IF EXISTS "audit_logs_insert" ON audit_logs;');
console.log('');
console.log('-- Also drop any other policies that might exist');
console.log('DROP POLICY IF EXISTS "Users can view their own organization" ON organizations;');
console.log('DROP POLICY IF EXISTS "Super admins can manage all organizations" ON organizations;');
console.log('DROP POLICY IF EXISTS "Users can view stores in their organization" ON stores;');
console.log('DROP POLICY IF EXISTS "Store owners and admins can manage their stores" ON stores;');
console.log('DROP POLICY IF EXISTS "Users can view users in their organization" ON users;');
console.log('DROP POLICY IF EXISTS "Users can update their own profile" ON users;');
console.log('DROP POLICY IF EXISTS "Admins can manage users in their organization" ON users;');
console.log('DROP POLICY IF EXISTS "Users can view their own profile" ON users;');
console.log('DROP POLICY IF EXISTS "Super admins can manage all users" ON users;');
console.log('DROP POLICY IF EXISTS "Users can view invitations for their stores" ON store_invitations;');
console.log('DROP POLICY IF EXISTS "Admins can manage invitations for their stores" ON store_invitations;');
console.log('DROP POLICY IF EXISTS "Users can view categories in their organization" ON categories;');
console.log('DROP POLICY IF EXISTS "Users can create categories" ON categories;');
console.log('DROP POLICY IF EXISTS "Users can update categories" ON categories;');
console.log('DROP POLICY IF EXISTS "Users can delete categories" ON categories;');
console.log('DROP POLICY IF EXISTS "Users can view products in their organization" ON products;');
console.log('DROP POLICY IF EXISTS "Users can create products" ON products;');
console.log('DROP POLICY IF EXISTS "Users can update products" ON products;');
console.log('DROP POLICY IF EXISTS "Users can delete products" ON products;');
console.log('DROP POLICY IF EXISTS "Users can view orders in their organization" ON orders;');
console.log('DROP POLICY IF EXISTS "Users can create orders" ON orders;');
console.log('DROP POLICY IF EXISTS "Users can update orders" ON orders;');
console.log('DROP POLICY IF EXISTS "Users can delete orders" ON orders;');
console.log('DROP POLICY IF EXISTS "Users can view audit logs for their organization" ON audit_logs;');
console.log('DROP POLICY IF EXISTS "System can insert audit logs" ON audit_logs;');
console.log('');
console.log('-- Step 2: Ensure RLS is enabled on all tables');
console.log('ALTER TABLE organizations ENABLE ROW LEVEL SECURITY;');
console.log('ALTER TABLE stores ENABLE ROW LEVEL SECURITY;');
console.log('ALTER TABLE users ENABLE ROW LEVEL SECURITY;');
console.log('ALTER TABLE store_invitations ENABLE ROW LEVEL SECURITY;');
console.log('ALTER TABLE categories ENABLE ROW LEVEL SECURITY;');
console.log('ALTER TABLE products ENABLE ROW LEVEL SECURITY;');
console.log('ALTER TABLE suppliers ENABLE ROW LEVEL SECURITY;');
console.log('ALTER TABLE customers ENABLE ROW LEVEL SECURITY;');
console.log('ALTER TABLE orders ENABLE ROW LEVEL SECURITY;');
console.log('ALTER TABLE order_items ENABLE ROW LEVEL SECURITY;');
console.log('ALTER TABLE stock_movements ENABLE ROW LEVEL SECURITY;');
console.log('ALTER TABLE audit_logs ENABLE ROW LEVEL SECURITY;');
console.log('ALTER TABLE store_analytics ENABLE ROW LEVEL SECURITY;');
console.log('');
console.log('-- Step 3: Create clean, simple policies');
console.log('');
console.log('-- Organizations');
console.log('CREATE POLICY "organizations_select" ON organizations');
console.log('    FOR SELECT USING (auth.uid() IS NOT NULL);');
console.log('');
console.log('CREATE POLICY "organizations_all" ON organizations');
console.log('    FOR ALL USING (');
console.log('        EXISTS (');
console.log('            SELECT 1 FROM users');
console.log('            WHERE id = auth.uid() AND role = \'super_admin\' AND status = \'active\'');
console.log('        )');
console.log('    );');
console.log('');
console.log('-- Stores');
console.log('CREATE POLICY "stores_select" ON stores');
console.log('    FOR SELECT USING (');
console.log('        auth.uid() IS NOT NULL AND (');
console.log('            owner_id = auth.uid() OR');
console.log('            organization_id IN (');
console.log('                SELECT organization_id FROM users WHERE id = auth.uid()');
console.log('            )');
console.log('        )');
console.log('    );');
console.log('');
console.log('CREATE POLICY "stores_all" ON stores');
console.log('    FOR ALL USING (');
console.log('        auth.uid() IS NOT NULL AND (');
console.log('            owner_id = auth.uid() OR');
console.log('            EXISTS (');
console.log('                SELECT 1 FROM users');
console.log('                WHERE id = auth.uid() AND');
console.log('                      organization_id = stores.organization_id AND');
console.log('                      role IN (\'admin\', \'super_admin\') AND');
console.log('                      status = \'active\'');
console.log('            )');
console.log('        )');
console.log('    );');
console.log('');
console.log('-- Users (most restrictive)');
console.log('CREATE POLICY "users_select_own" ON users');
console.log('    FOR SELECT USING (id = auth.uid());');
console.log('');
console.log('CREATE POLICY "users_select_org" ON users');
console.log('    FOR SELECT USING (');
console.log('        organization_id IN (');
console.log('            SELECT organization_id FROM users WHERE id = auth.uid()');
console.log('        )');
console.log('    );');
console.log('');
console.log('CREATE POLICY "users_update_own" ON users');
console.log('    FOR UPDATE USING (id = auth.uid());');
console.log('');
console.log('CREATE POLICY "users_admin_manage" ON users');
console.log('    FOR ALL USING (');
console.log('        EXISTS (');
console.log('            SELECT 1 FROM users u');
console.log('            WHERE u.id = auth.uid() AND');
console.log('                  u.organization_id = users.organization_id AND');
console.log('                  u.role IN (\'admin\', \'super_admin\') AND');
console.log('                  u.status = \'active\'');
console.log('        )');
console.log('    );');
console.log('');
console.log('-- Store invitations');
console.log('CREATE POLICY "store_invitations_select" ON store_invitations');
console.log('    FOR SELECT USING (');
console.log('        store_id IN (');
console.log('            SELECT id FROM stores WHERE owner_id = auth.uid()');
console.log('        ) OR');
console.log('        EXISTS (');
console.log('            SELECT 1 FROM users');
console.log('            WHERE id = auth.uid() AND role IN (\'admin\', \'super_admin\')');
console.log('        )');
console.log('    );');
console.log('');
console.log('CREATE POLICY "store_invitations_all" ON store_invitations');
console.log('    FOR ALL USING (');
console.log('        store_id IN (');
console.log('            SELECT id FROM stores WHERE owner_id = auth.uid()');
console.log('        ) OR');
console.log('        EXISTS (');
console.log('            SELECT 1 FROM users');
console.log('            WHERE id = auth.uid() AND role IN (\'admin\', \'super_admin\')');
console.log('        )');
console.log('    );');
console.log('');
console.log('-- Categories, Products, Orders (organization-based)');
console.log('CREATE POLICY "categories_select" ON categories');
console.log('    FOR SELECT USING (');
console.log('        organization_id IN (');
console.log('            SELECT organization_id FROM users WHERE id = auth.uid()');
console.log('        )');
console.log('    );');
console.log('');
console.log('CREATE POLICY "categories_all" ON categories');
console.log('    FOR ALL USING (');
console.log('        organization_id IN (');
console.log('            SELECT organization_id FROM users WHERE id = auth.uid()');
console.log('        ) AND');
console.log('        EXISTS (');
console.log('            SELECT 1 FROM users');
console.log('            WHERE id = auth.uid() AND status = \'active\'');
console.log('        )');
console.log('    );');
console.log('');
console.log('CREATE POLICY "products_select" ON products');
console.log('    FOR SELECT USING (');
console.log('        organization_id IN (');
console.log('            SELECT organization_id FROM users WHERE id = auth.uid()');
console.log('        )');
console.log('    );');
console.log('');
console.log('CREATE POLICY "products_all" ON products');
console.log('    FOR ALL USING (');
console.log('        organization_id IN (');
console.log('            SELECT organization_id FROM users WHERE id = auth.uid()');
console.log('        ) AND');
console.log('        EXISTS (');
console.log('            SELECT 1 FROM users');
console.log('            WHERE id = auth.uid() AND status = \'active\'');
console.log('        )');
console.log('    );');
console.log('');
console.log('CREATE POLICY "orders_select" ON orders');
console.log('    FOR SELECT USING (');
console.log('        organization_id IN (');
console.log('            SELECT organization_id FROM users WHERE id = auth.uid()');
console.log('        )');
console.log('    );');
console.log('');
console.log('CREATE POLICY "orders_all" ON orders');
console.log('    FOR ALL USING (');
console.log('        organization_id IN (');
console.log('            SELECT organization_id FROM users WHERE id = auth.uid()');
console.log('        ) AND');
console.log('        EXISTS (');
console.log('            SELECT 1 FROM users');
console.log('            WHERE id = auth.uid() AND status = \'active\'');
console.log('        )');
console.log('    );');
console.log('');
console.log('-- Audit logs');
console.log('CREATE POLICY "audit_logs_select" ON audit_logs');
console.log('    FOR SELECT USING (');
console.log('        organization_id IN (');
console.log('            SELECT organization_id FROM users WHERE id = auth.uid()');
console.log('        )');
console.log('    );');
console.log('');
console.log('CREATE POLICY "audit_logs_insert" ON audit_logs');
console.log('    FOR INSERT WITH CHECK (true);');
console.log('');
console.log('-- =====================================================');
console.log('-- COMPLETE');
console.log('-- =====================================================');
console.log('```');

console.log('\nâœ… Copy and paste this SQL into your Supabase SQL Editor');
console.log('ðŸ”§ This will:');
console.log('   â€¢ Drop ALL existing policies');
console.log('   â€¢ Enable RLS on all tables');
console.log('   â€¢ Create clean, simple policies');
console.log('   â€¢ Eliminate infinite recursion');

console.log('\nðŸŽ¯ After applying, test with:');
console.log('```sql');
console.log('SELECT * FROM users WHERE id = auth.uid() LIMIT 1;');
console.log('```');

console.log('\nðŸš€ Your RLS policies will be properly configured!');